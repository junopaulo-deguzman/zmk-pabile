/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define LWR  1
#define RSE  2
#define ADJ  3
#define FN   4

#define HYPR LG(LS(LA(LCTRL)))
#define MEH  LS(LA(LCTRL))
#define LCAG LG(LA(LCTRL))

#define MAC_COPY &kp LG(C)
#define MAC_PASTE &kp LG(V)
#define MAC_NWKS &kp LC(RIGHT)
#define MAC_PWKS &kp LC(LEFT)


/ {

	combos {
        compatible = "zmk,combos";

		combo_ESC {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

		combo_RSFT {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp RSFT>;
        };

		combo_lwr {
            timeout-ms = <50>;
            key-positions = <20 29>;
            bindings = <&sl LWR>;
        };

		combo_rse {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&sl RSE>;
        };

		combo_guiTab {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LG(TAB)>;
        };
		

        combo_skGui {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&sk LGUI>;
        };
		combo_ktGui {
            timeout-ms = <50>;
            key-positions = <26 27>;
			layers = <0>;
            bindings = <&kt LGUI>;
        };

		combo_skCtrl {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&sk LCTRL>;
        };
		combo_skAlt {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&sk LALT>;
        };
    };

	behaviors {
        tdGUI: tap_dance_gui {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_GUI";
            tapping-term-ms = <200>;
            bindings = <&sk LGUI>, <&kt LGUI>;
        };
		tdSFT: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_SFT";
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kt LSHFT>;
        };
		tdCTRL: tap_dance_ctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_CTL";
            tapping-term-ms = <200>;
            bindings = <&sk LCTRL>, <&kt LCTRL>;
        };
		tdALT: tap_dance_alt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_ALT";
            tapping-term-ms = <200>;
            bindings = <&sk LALT>, <&kt LALT>;
        };
		tdLWR: tap_dance_lwr {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_LWR";
            tapping-term-ms = <200>;
            bindings = <&sl LWR>, <&to LWR>;
        };
		tdRSE: tap_dance_rse {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_RSE";
            tapping-term-ms = <200>;
            bindings = <&sl RSE>, <&to RSE>;
        };
		tdFN: tap_dance_fn {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_FN";
            tapping-term-ms = <200>;
            bindings = <&sl FN>, <&kp GRAVE>;
        };
		tdBASE: tap_dance_base {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
			label = "TAP_DANCE_BASE";
            tapping-term-ms = <200>;
            bindings = <&to BASE>, <&to ADJ>;
        };

    };

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			// --------------------------------------------------------------------------
			// |  Q   |  W   |  F   |  P   |  B   |   J   |  L    |  U   |  Y   |   ;   | 
			// |  A   |  R   |  S   |  T   |  G   |   M   |  N    |  E   |  I   |   O   | 
			// |  Z   |  X   |  C   |  D   |  V   |   K   |  H    |  ,   |  .   |   /   |       
			// | LCTL | LGUI | LALT | LSHFT|     BASE     |  ENT  | DEL  | RCTL | ESC   |

			bindings = <
				&kp Q     &kp W     &kp F    &kp P     &kp B      &kp J       &kp L       &kp U     &kp Y     &kp SCLN
				&kp A     &kp R     &kp S    &kp T     &kp G      &kp M       &kp N       &kp E     &kp I     &kp O
				&kp Z     &kp X     &kp C    &kp D     &kp V      &kp K       &kp H       &kp COMMA &kp DOT   &kp FSLH
				&tdFN     &to LWR   &kp TAB  &tdSFT    &tdBASE    &tdBASE     &kp SPACE   &kp BSPC  &to RSE   &kp RET
			>;
		};
		1 {
			bindings = <
				&none    &none     &none      &none      &none      &kp LBKT   &kp N7       &kp N8    &kp N9   &kp RBKT
				&none    &tdALT    &tdCTRL    &tdGUI     &none      &kp MINUS  &kp N4       &kp N5    &kp N6   &kp EQUAL
				&none    &none     &none      &none      &none      &kp N0     &kp N1       &kp N2    &kp N3   &trans
				&trans   &trans    &trans     &trans     &tdBASE    &tdBASE    &trans       &trans    &trans   &trans
			>;
		};
		2 {
			bindings = <
				&kp TILDE &kp LPAR  &kp STAR  &kp AMPS   &kp RPAR     &none           &none     &none             &none           &none
				&kp DQT   &kp CARET &kp PRCNT &kp DLLR   &kp KP_PLUS  &none           &tdGUI    &tdCTRL           &tdALT          &none
				&kp TILDE &kp HASH  &kp AT    &kp EXCL   &kp PIPE     &none           &none     &none             &none           &none
				&trans    &trans    &trans    &kp LBRC   &tdBASE      &tdBASE         &kp RBRC  &none             &none           &none
			>;
		};
		3 {
			bindings = <
				&none         &none       &none       &none       &none      &kp INS     &kp PAGE_UP  &kp UP     &kp PAGE_DOWN      &kp DEL
				&none         &none       &none       &none       &none      &kp HOME    &kp LEFT     &kp DOWN   &kp RIGHT          &none
				&none         &none       MAC_COPY    MAC_PASTE   &none      &kp END     MAC_PWKS     &none      MAC_NWKS           &none
				&trans        &trans      &trans      &kt LSHFT   &tdBASE    &tdBASE  &trans       &trans     &trans             &trans
			>;
		};
		4 {
			bindings = <
				&bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none      &kp C_PP      &kp C_PREV    &kp C_NEXT  &none
				&out OUT_USB  &none        &none        &none        &none        &none      &kp C_VOL_DN  &kp C_VOL_UP  &none       &none
				&out OUT_BLE  &bt BT_CLR   &bt BT_PRV   &bt BT_NXT   &none        &none      &none         &kp C_MUTE    &none       &ext_power EP_TOG
				&none         &none        &none        &none        &tdBASE      &tdBASE    &trans        &none         &none       &bootloader
			>;
		};
	};
};

